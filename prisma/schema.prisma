
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

model Menu {
  id              String    @id @default(cuid())
  titulo          String
  nomeIcone       String
  menuPrincipalId String?
  menuPrincipal   Menu?     @relation("SubMenus", fields: [menuPrincipalId], references: [id], onDelete: Cascade)
  subMenus        Menu[]    @relation("SubMenus")
  isAtivo         Boolean   @default(true)
  path            String    @default("#")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Prioridade {
  id        String   @id @default(cuid())
  descricao String   @unique @db.Text
  tickets   Ticket[]
}

model Tipo {
  id        String   @id @default(cuid())
  descricao String   @unique @db.Text
  tickets   Ticket[]
}

model Situacao {
  id        String   @id @default(cuid())
  descricao String   @unique @db.Text
  tickets   Ticket[]
}

model Ambiente {
  id        String   @id @default(cuid())
  descricao String   @unique @db.Text
  tickets   Ticket[]
}

model Origem {
  id        String   @id @default(cuid())
  descricao String   @unique @db.Text
  tickets   Ticket[]
}

model Usuario {
  id                 String    @id @default(cuid())
  nome               String    @db.Text
  email              String    @unique
  hashedPassword     String?
  fotoUrl            String?   @db.Text
  isAtivo            Boolean   @default(true)
  ticketsCriados     Ticket[]  @relation("TicketsCriadosPeloUsuario")
  ticketsAtribuidos  Ticket[]  @relation("TicketsAtribuidosAoUsuario")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Ticket {
  id                 String    @id @default(cuid())
  numeroTicket       String    @unique
  problemDescription String    @db.Text // Renamed from 'descricao' for clarity
  prioridadeId       String
  prioridade         Prioridade @relation(fields: [prioridadeId], references: [id])
  tipoId             String
  tipo               Tipo      @relation(fields: [tipoId], references: [id])
  ambienteId         String
  ambiente           Ambiente  @relation(fields: [ambienteId], references: [id])
  origemId           String
  origem             Origem    @relation(fields: [origemId], references: [id])
  solicitanteId      String
  solicitante        Usuario   @relation("TicketsCriadosPeloUsuario", fields: [solicitanteId], references: [id])
  responsavelId      String?
  responsavel        Usuario?  @relation("TicketsAtribuidosAoUsuario", fields: [responsavelId], references: [id])
  evidencias         String    @db.Text
  anexos             String?   @db.Text
  inicioAtendimento  DateTime?
  terminoAtendimento DateTime?
  resolutionDetails  String?   @db.Text
  situacaoId         String
  situacao           Situacao  @relation(fields: [situacaoId], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  anexo              TicketAnexo[]
  evidencia          TicketEvidencia[]
}

model TicketAnexo {
  id          String   @id @default(cuid())
  ticketId    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  nome        String   @db.Text
  tipo        String   @db.Text
  nomeObjeto  String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TicketEvidencia {
  id          String   @id @default(cuid())
  ticketId    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  nome        String   @db.Text
  tipo        String   @db.Text
  nomeObjeto  String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
